// Generated from /Users/cnanjo/repository/mine/adl-tools/adl/src/main/resources/antlr/adl.g4 by ANTLR 4.5.1
package org.openehr.adl.antlr;
import oracle.jrockit.jfr.StringConstantPool;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.TerminalNode;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openehr.aom.archetype.*;
import org.openehr.odin.*;
import org.openehr.validation.InvalidArtefactException;

import java.util.Stack;
import java.util.UUID;

/**
 * This class provides an empty implementation of {@link adlVisitor},
 * which can be extended to create a visitor which only needs to handle a subset
 * of the available methods.
 *
 * @param <T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
public class AdlVisitorImpl<T> extends adlBaseVisitor<T> implements adlVisitor<T> {

	private static Logger log = LogManager.getLogger(AdlVisitorImpl.class.getName());

	/**
	 * The stack used to persist the temporary components of the AST as the AST is built.
	 * Completion of the Visitor.visit(ParseTree tree) call should result in a single node
	 * that is the root of the AST.
	 */
	private Stack<Object> stack;

	/**
	 * Default no-arg constructor.
	 */
	public AdlVisitorImpl() {
		initializeStack();
	}

	/**
	 * Returns the stack associated with this visitor.
	 *
	 * @return The stack for this visitor
	 */
	public Stack getStack() {
		return this.stack;
	}

	/**
	 * Initializes the object with a new stack. Note that the old stack is
	 * dereferenced upon initialization.
	 */
	private void initializeStack() {
		stack = new Stack();
	}

	/**
	 * Method returns the root node of the ADL AST generated by the visitor. Be sure to call
	 * after invocation of {@link #visit(ParseTree)}
	 *
	 * @return The root node for this AST
	 */
	public Object getAstRootNode() {
		Object root;
		if(stack.size() == 1) {
			root = stack.pop();
		} else {
			throw new IllegalStateException("Stack should contain a single root node but contains " + stack.size() + " root nodes");
		}
		return root;
	}
	/********************************************************************************************
	 * START ADL BLOCK
	 ********************************************************************************************/
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAdl(adlParser.AdlContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAuthored_archetype(adlParser.Authored_archetypeContext ctx) {
		AuthoredArchetype archetype = new AuthoredArchetype();
		archetype.setArchetypeId(ctx.ARCHETYPE_HRID().getText());
		getStack().push(archetype);
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTemplate(adlParser.TemplateContext ctx) {
		Template template = new Template();
		template.setArchetypeId(ctx.ARCHETYPE_HRID().getText());
		getStack().push(template);
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTemplate_overlay(adlParser.Template_overlayContext ctx) {
		TemplateOverlay templateOverlay = new TemplateOverlay();
		templateOverlay.setArchetypeId(ctx.ARCHETYPE_HRID().getText());
		getStack().push(templateOverlay);
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitOperational_template(adlParser.Operational_templateContext ctx) {
		OperationalTemplate operationalTemplate = new OperationalTemplate();
		operationalTemplate.setArchetypeId(ctx.ARCHETYPE_HRID().getText());
		getStack().push(operationalTemplate);
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitSpecialize_section(adlParser.Specialize_sectionContext ctx) {
		Object object = getStack().peek();
		if(object != null && object instanceof Archetype && !(object instanceof OperationalTemplate)) {
			String parentId = ctx.getChild(1).getText();
			((Archetype)object).setParentArchetypeId(parentId);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitLanguage_section(adlParser.Language_sectionContext ctx) {
		T retVal = visitChildren(ctx);
		CompositeOdinObject language = (CompositeOdinObject)getStack().pop();
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDescription_section(adlParser.Description_sectionContext ctx) {
		getStack().push(new CompositeOdinObject());
		T retVal = visitChildren(ctx);
		CompositeOdinObject description = (CompositeOdinObject)getStack().pop();
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDefinition_section(adlParser.Definition_sectionContext ctx) {
		getStack().push(new CompositeOdinObject());
		T retVal = visitChildren(ctx);
		CompositeOdinObject definition = (CompositeOdinObject)getStack().pop();
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitRules_section(adlParser.Rules_sectionContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTerminology_section(adlParser.Terminology_sectionContext ctx) {
		getStack().push(new CompositeOdinObject());
		T retVal = visitChildren(ctx);
		CompositeOdinObject terminology = (CompositeOdinObject)getStack().pop();
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAnnotations_section(adlParser.Annotations_sectionContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitComponent_terminologies_section(adlParser.Component_terminologies_sectionContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data(adlParser.Meta_dataContext ctx) {
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data_item(adlParser.Meta_data_itemContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data_value(adlParser.Meta_data_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data_tag_adl_version(adlParser.Meta_data_tag_adl_versionContext ctx) {
		((AuthoredArchetype)getStack().peek()).setAdlVersion(getAuthoredArchetypeMetadataValue(ctx));
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data_tag_uid(adlParser.Meta_data_tag_uidContext ctx) {
		String uuid = getAuthoredArchetypeMetadataValue(ctx);
		if(uuid != null) {
			UUID parsedUuid = UUID.fromString(uuid);
			((AuthoredArchetype) getStack().peek()).setUuid(parsedUuid);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data_tag_build_uid(adlParser.Meta_data_tag_build_uidContext ctx) {
		String uuid = getAuthoredArchetypeMetadataValue(ctx);
		if(uuid != null) {
			UUID parsedUuid = UUID.fromString(uuid);
			((AuthoredArchetype) getStack().peek()).setBuildUid(parsedUuid);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data_tag_rm_release(adlParser.Meta_data_tag_rm_releaseContext ctx) {
		((AuthoredArchetype)getStack().peek()).setRmRelease(getAuthoredArchetypeMetadataValue(ctx));
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data_tag_is_controlled(adlParser.Meta_data_tag_is_controlledContext ctx) {
		String isControlled = ctx.getText();
		if(isControlled != null && isControlled.equalsIgnoreCase("is_controlled")) {
			((AuthoredArchetype) getStack().peek()).setControlled(true);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMeta_data_tag_is_generated(adlParser.Meta_data_tag_is_generatedContext ctx) {
		String isGenerated = ctx.getText();
		if(isGenerated != null && isGenerated.equalsIgnoreCase("is_generated")) {
			((AuthoredArchetype) getStack().peek()).setGenerated(true);
		}
		return visitChildren(ctx);
	}
	/********************************************************************************************
	 * START AOM BLOCK
	 ********************************************************************************************/
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_complex_object(adlParser.C_complex_objectContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_objects(adlParser.C_objectsContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitSibling_order(adlParser.Sibling_orderContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_non_primitive_object(adlParser.C_non_primitive_objectContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_archetype_root(adlParser.C_archetype_rootContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_complex_object_proxy(adlParser.C_complex_object_proxyContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitArchetype_slot(adlParser.Archetype_slotContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_attribute_def(adlParser.C_attribute_defContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_attribute(adlParser.C_attributeContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAdl_dir(adlParser.Adl_dirContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_attribute_tuple(adlParser.C_attribute_tupleContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_primitive_tuple(adlParser.C_primitive_tupleContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_includes(adlParser.C_includesContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_excludes(adlParser.C_excludesContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_existence(adlParser.C_existenceContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitExistence(adlParser.ExistenceContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_cardinality(adlParser.C_cardinalityContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitCardinality(adlParser.CardinalityContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitOrdering_mod(adlParser.Ordering_modContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitUnique_mod(adlParser.Unique_modContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMultiplicity_mod(adlParser.Multiplicity_modContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_occurrences(adlParser.C_occurrencesContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitMultiplicity(adlParser.MultiplicityContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssertion(adlParser.AssertionContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitBoolean_expr(adlParser.Boolean_exprContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitBoolean_leaf(adlParser.Boolean_leafContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitBoolean_constraint(adlParser.Boolean_constraintContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitBoolean_binop(adlParser.Boolean_binopContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitBoolean_literal(adlParser.Boolean_literalContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitArithmetic_relop_expr(adlParser.Arithmetic_relop_exprContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitArithmetic_leaf(adlParser.Arithmetic_leafContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitArithmetic_arith_expr(adlParser.Arithmetic_arith_exprContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitRelational_binop(adlParser.Relational_binopContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitArithmetic_binop(adlParser.Arithmetic_binopContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_primitive_object(adlParser.C_primitive_objectContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_integer(adlParser.C_integerContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssumed_integer_value(adlParser.Assumed_integer_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_real(adlParser.C_realContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssumed_real_value(adlParser.Assumed_real_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_date_time(adlParser.C_date_timeContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssumed_date_time_value(adlParser.Assumed_date_time_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_date(adlParser.C_dateContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssumed_date_value(adlParser.Assumed_date_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_time(adlParser.C_timeContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssumed_time_value(adlParser.Assumed_time_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_duration(adlParser.C_durationContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssumed_duration_value(adlParser.Assumed_duration_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_string(adlParser.C_stringContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssumed_string_value(adlParser.Assumed_string_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitRegex_constraint(adlParser.Regex_constraintContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_terminology_code(adlParser.C_terminology_codeContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitC_boolean(adlParser.C_booleanContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAssumed_boolean_value(adlParser.Assumed_boolean_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAdl_path(adlParser.Adl_pathContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAdl_relative_path(adlParser.Adl_relative_pathContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAdl_path_segment(adlParser.Adl_path_segmentContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAdl_path_element(adlParser.Adl_path_elementContext ctx) { return visitChildren(ctx); }

	/********************************************************************************************
	 * START ODIN BLOCK
	 ********************************************************************************************/

	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitOdin_text(adlParser.Odin_textContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAttr_vals(adlParser.Attr_valsContext ctx) {
		if(getStack().size() == 0 || getStack().size() == 1 && getStack().peek() instanceof Archetype) {
			getStack().push(new CompositeOdinObject());
		}
		T retVal = visitChildren(ctx);
		if(!(ctx.getParent() instanceof adlParser.Odin_textContext)) {
			if(stack.size() > 0 && stack.peek() instanceof OdinAttribute) {
				OdinAttribute attribute = (OdinAttribute)stack.peek();
				stack.pop();
			}
		} else {
			log.info("Done processing");
		}
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitAttr_val(adlParser.Attr_valContext ctx) {
		String rm_attributeId = ctx.getChild(0).getText();
		OdinAttribute attribute = new OdinAttribute();
		attribute.setName(rm_attributeId);
		//System.out.println("Processing attribute : " + rm_attributeId);
		CompositeOdinObject complexObject = (CompositeOdinObject)stack.peek();
		complexObject.addAttribute(attribute);
		getStack().push(attribute);
		T retVal = visitChildren(ctx);
		stack.pop();
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitObject_block(adlParser.Object_blockContext ctx) {
		T retVal = visitChildren(ctx);
		Object object = stack.peek();
		if(object instanceof CompositeOdinObject) {
			if(!(ctx.getParent() instanceof adlParser.Keyed_objectContext)) {
				stack.pop();
			}
		}
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitObject_value_block(adlParser.Object_value_blockContext ctx) {
		int index = 1;
		if(ctx.getChildCount() == 6) {
			index = 4;
		}
		ParseTree child = ctx.getChild(index);
		if(child instanceof adlParser.Keyed_objectContext) {
			Object object = stack.peek();
			if(object instanceof OdinAttribute) { //We are probably creating the body of an attribute
				OdinAttribute topAttribute = (OdinAttribute)object;
				CompositeOdinObject attributeBody = new CompositeOdinObject();
				topAttribute.addChild(attributeBody);
				stack.push(attributeBody);
			} else if(object instanceof StringObject) {//May be a nested keyed object in another keyed object
				stack.push(new CompositeOdinObject());
			} else {
				throw new RuntimeException("Invalid state: " + object.getClass().getName());
			}
		} else if(child instanceof adlParser.Attr_valsContext) {
			CompositeOdinObject complexObject = new CompositeOdinObject();
			if(stack.size() > 0 && stack.peek() instanceof OdinAttribute) { //We are probably creating the body of an attribute
				OdinAttribute attribute = (OdinAttribute)stack.peek();
				attribute.addChild(complexObject);
			}
			getStack().push(complexObject);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitKeyed_object(adlParser.Keyed_objectContext ctx) {
		T retVal = visitChildren(ctx);
		OdinObject value = (OdinObject)stack.pop();
		OdinObject key = (OdinObject)stack.pop();
		CompositeOdinObject body = (CompositeOdinObject)stack.peek();
		body.addKeyedObject(key, value);
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitPrimitive_object(adlParser.Primitive_objectContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitPrimitive_value(adlParser.Primitive_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitPrimitive_list_value(adlParser.Primitive_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitPrimitive_interval_value(adlParser.Primitive_interval_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitObject_reference_block(adlParser.Object_reference_blockContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitOdin_path_list(adlParser.Odin_path_listContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitOdin_path(adlParser.Odin_pathContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitOdin_path_segment(adlParser.Odin_path_segmentContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitOdin_path_element(adlParser.Odin_path_elementContext ctx) { return visitChildren(ctx); }

	/********************************************************************************************
	 * END ODIN BLOCK
	 ********************************************************************************************/

	/********************************************************************************************
	 * START ODIN VALUE BLOCK
	 ********************************************************************************************/

	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitString_value(adlParser.String_valueContext ctx) {
		String value = removeDoubleQuotes(ctx.getText());
		Object topItem = stack.peek();
		if(topItem instanceof OdinAttribute) { //Create a string-valued attribute
			OdinAttribute attribute = (OdinAttribute) stack.peek();
			StringObject cString = new StringObject();
			cString.setValue(value);
			attribute.getChildren().add(cString);
		} else {
			stack.push(new StringObject(value));
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitString_list_value(adlParser.String_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * <p>Method handles the special list case of '...'.</p>
	 *
	 * @param node A terminal node
	 * @return A parse tree node of type T
	 */
	@Override
	public T visitTerminal(TerminalNode node) {
		if (node.getParent() instanceof adlParser.String_list_valueContext) {
			String value = node.getText();
			if (value != null && value.equals("...")) {
				OdinAttribute attribute = (OdinAttribute)stack.peek();
				StringObject cString = new StringObject();
				cString.setValue(value);
				attribute.getChildren().add(cString);
			}
		}
		T retVal = super.visitTerminal(node);
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitInteger_value(adlParser.Integer_valueContext ctx) {
		IntegerObject cInteger = new IntegerObject();
		cInteger.setValue(ctx.getText());
		Object topItem = stack.peek();
		if(ctx.getParent() instanceof adlParser.Integer_interval_valueContext) {
			//Do nothing. Handled by odin.Integer_interval_valueContext
		} else {//Simple leaf attribute or an integer list
			if(topItem instanceof OdinAttribute) { //Create a string-valued attribute
				OdinAttribute attribute = (OdinAttribute) topItem;
				attribute.getChildren().add(cInteger);
			} else {
				stack.push(cInteger);
			}
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitInteger_list_value(adlParser.Integer_list_valueContext ctx) {
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitInteger_interval_value(adlParser.Integer_interval_valueContext ctx) {
		String intervalExpression = ctx.getText();
		IntegerIntervalObject integerInterval = new IntegerIntervalObject();
		integerInterval.setIntervalExpression(intervalExpression);
		OdinAttribute attribute = (OdinAttribute) stack.peek();
		attribute.addChild(integerInterval);
		if (ctx.children.get(1) instanceof adlParser.RelopContext) {
			integerInterval.handleRelopExpression(ctx);
		} else {
			integerInterval.handleRangeExpression(ctx);
		}
		T retVal = visitChildren(ctx);
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitInteger_interval_list_value(adlParser.Integer_interval_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitReal_value(adlParser.Real_valueContext ctx) {
		if(ctx.getParent() instanceof adlParser.Real_interval_valueContext) {
			//Do nothing. Handled by odin.Real_interval_valueContext
		} else {//Simple leaf attribute or a list
			String value = ctx.getText();
			OdinAttribute attribute = (OdinAttribute) stack.peek();
			RealObject cReal = new RealObject();
			cReal.setValue(value);
			attribute.getChildren().add(cReal);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitReal_list_value(adlParser.Real_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitReal_interval_value(adlParser.Real_interval_valueContext ctx) {
		String intervalExpression = ctx.getText();
		RealIntervalObject integerInterval = new RealIntervalObject();
		integerInterval.setIntervalExpression(intervalExpression);
		OdinAttribute attribute = (OdinAttribute) stack.peek();
		attribute.addChild(integerInterval);
		if (ctx.children.get(1) instanceof adlParser.RelopContext) {
			integerInterval.handleRelopExpression(ctx);
		} else {
			integerInterval.handleRangeExpression(ctx);
		}
		T retVal = visitChildren(ctx);
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitReal_interval_list_value(adlParser.Real_interval_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitBoolean_value(adlParser.Boolean_valueContext ctx) {
		String value = removeDoubleQuotes(ctx.getText());
		Boolean boolValue = Boolean.parseBoolean(value);
		OdinAttribute attribute = (OdinAttribute)stack.peek();
		BooleanObject cBoolean = new BooleanObject(boolValue);
		attribute.getChildren().add(cBoolean);
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitBoolean_list_value(adlParser.Boolean_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitCharacter_value(adlParser.Character_valueContext ctx) {
		String value = removeSingleQuotes(ctx.getText());
		OdinAttribute attribute = (OdinAttribute)stack.peek();
		CharObject charObject = new CharObject();
		charObject.setValue(value);
		attribute.getChildren().add(charObject);
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitCharacter_list_value(adlParser.Character_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDate_value(adlParser.Date_valueContext ctx) {
		if(ctx.getParent() instanceof adlParser.Date_interval_valueContext) {
			//Do nothing. Handled by odin.Date_interval_valueContext
		} else {//Simple leaf attribute or a list
			String value = ctx.getText();
			OdinAttribute attribute = (OdinAttribute) stack.peek();
			DateObject date = new DateObject();
			date.setValue(value);
			attribute.getChildren().add(date);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDate_list_value(adlParser.Date_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDate_interval_value(adlParser.Date_interval_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDate_interval_list_value(adlParser.Date_interval_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTime_value(adlParser.Time_valueContext ctx) {
		if(ctx.getParent() instanceof adlParser.Time_interval_valueContext) {
			//Do nothing. Handled by odin.Time_interval_valueContext
		} else {//Simple leaf attribute or a list
			String value = ctx.getText();
			OdinAttribute attribute = (OdinAttribute) stack.peek();
			TimeObject timeObject = new TimeObject();
			timeObject.setValue(value);
			attribute.getChildren().add(timeObject);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTime_list_value(adlParser.Time_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTime_interval_value(adlParser.Time_interval_valueContext ctx) {
		String intervalExpression = ctx.getText();
		TimeIntervalObject timeInterval = new TimeIntervalObject();
		timeInterval.setIntervalExpression(intervalExpression);
		OdinAttribute attribute = (OdinAttribute) stack.peek();
		attribute.addChild(timeInterval);
		if (ctx.children.get(1) instanceof adlParser.RelopContext) {
			timeInterval.handleRelopExpression(ctx);
		} else {
			timeInterval.handleRangeExpression(ctx);
		}
		T retVal = visitChildren(ctx);
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTime_interval_list_value(adlParser.Time_interval_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDate_time_value(adlParser.Date_time_valueContext ctx) {
		if(ctx.getParent() instanceof adlParser.Date_time_interval_valueContext) {
			//Do nothing. Handled by odin.Date_time_interval_valueContext
		} else {//Simple leaf attribute or a list
			String value = ctx.getText();
			OdinAttribute attribute = (OdinAttribute) stack.peek();
			DateTimeObject dateTime = new DateTimeObject();
			dateTime.setValue(value);
			attribute.getChildren().add(dateTime);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDate_time_list_value(adlParser.Date_time_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDate_time_interval_value(adlParser.Date_time_interval_valueContext ctx) {
		String intervalExpression = ctx.getText();
		DateTimeIntervalObject dateTimeInterval = new DateTimeIntervalObject();
		dateTimeInterval.setIntervalExpression(intervalExpression);
		OdinAttribute attribute = (OdinAttribute) stack.peek();
		attribute.addChild(dateTimeInterval);
		if (ctx.children.get(1) instanceof adlParser.RelopContext) {
			dateTimeInterval.handleRelopExpression(ctx);
		} else {
			dateTimeInterval.handleRangeExpression(ctx);
		}
		T retVal = visitChildren(ctx);
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDate_time_interval_list_value(adlParser.Date_time_interval_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDuration_value(adlParser.Duration_valueContext ctx) {
		if(ctx.getParent() instanceof adlParser.Duration_interval_valueContext) {
			//Do nothing. Handled by odin.Duration_interval_valueContext
		} else {//Simple leaf attribute or a list
			String value = ctx.getText();
			OdinAttribute attribute = (OdinAttribute) stack.peek();
			DurationObject duration = new DurationObject();
			duration.setValue(value);
			attribute.getChildren().add(duration);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDuration_list_value(adlParser.Duration_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDuration_interval_value(adlParser.Duration_interval_valueContext ctx) {
		String intervalExpression = ctx.getText();
		DurationIntervalObject durationInterval = new DurationIntervalObject();
		durationInterval.setIntervalExpression(intervalExpression);
		OdinAttribute attribute = (OdinAttribute) stack.peek();
		attribute.addChild(durationInterval);
		if (ctx.children.get(1) instanceof adlParser.RelopContext) {
			durationInterval.handleRelopExpression(ctx);
		} else {
			durationInterval.handleRangeExpression(ctx);
		}
		T retVal = visitChildren(ctx);
		return retVal;
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitDuration_interval_list_value(adlParser.Duration_interval_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTerm_code_value(adlParser.Term_code_valueContext ctx) {
		String value = ctx.getText();
		OdinAttribute attribute = (OdinAttribute)stack.peek();
		TermCodeObject termCode = new TermCodeObject();
		termCode.setValue(value);
		attribute.getChildren().add(termCode);
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTerm_code_list_value(adlParser.Term_code_list_valueContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitUri_value(adlParser.Uri_valueContext ctx) {
		Object object = getStack().peek();
		String value = ctx.getText();
		UriObject uri = new UriObject();
		uri.setValue(value);
		if(object instanceof OdinAttribute) { //URI is the value of an attribute
			OdinAttribute attribute = (OdinAttribute) object;
			attribute.getChildren().add(uri);
		} else if(object instanceof StringObject) { //URI is probably the value of some keyed object
			getStack().push(uri);
		} else {
			throw new RuntimeException("Invalid type " + object.getClass().getCanonicalName());
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitRelop(adlParser.RelopContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitRm_type_id(adlParser.Rm_type_idContext ctx) {
		String value = ctx.getText();
		CompositeOdinObject complexObject = (CompositeOdinObject) stack.peek();
		if(complexObject.getType() == null) {
			complexObject.setType(value);
		}
		return visitChildren(ctx);
	}
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitRm_attribute_id(adlParser.Rm_attribute_idContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitIdentifier(adlParser.IdentifierContext ctx) {
//		if(ctx.getParent() instanceof adlParser.Meta_data_itemContext) {
//			if(stack.size() > 0 && stack.peek() instanceof AuthoredArchetype) {
//				adlParser.Meta_data_itemContext parent = (adlParser.Meta_data_itemContext)ctx.getParent();
//				String identifier = parent.getChild(0).getText();
//				((AuthoredArchetype)getStack().peek()).setArchetypeId(identifier);
//			}
//		}
		return visitChildren(ctx);
	}

	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitArchetype_ref(adlParser.Archetype_refContext ctx) { return visitChildren(ctx); }

	/********************************************************************************************
	 * END ODIN VALUE BLOCK
	 ********************************************************************************************/

	/**************************************************************************************************
	 * Convenience Methods
	 **************************************************************************************************/

	protected String getAuthoredArchetypeMetadataValue(ParseTree ctx) {
		if(getStack().peek() instanceof AuthoredArchetype) {
			AuthoredArchetype archetype = (AuthoredArchetype)getStack().peek();
			return ctx.getParent().getChild(2).getText();
		} else {
			throw new InvalidArtefactException("Error parsing archetype - unknown type ");
		}
	}

	/**
	 * <p>Removes the ODIN quotes around strings such that "My String" --> My String</p>
	 *
	 * @param input A quoted string
	 * @return A string without quotes
	 */
	private String removeDoubleQuotes(String input) {
		return input.replaceAll("(^\")|(\"$)", "");
	}

	private String removeSingleQuotes(String input) {
		return input.replaceAll("(^\')|(\'$)", "");
	}
}